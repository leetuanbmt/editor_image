// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings cho thư viện xử lý ảnh.
///
/// Tạo lại bindings với lệnh `dart run ffigen --config ffigen.yaml`.
///
class ImageProcessorBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ImageProcessorBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ImageProcessorBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Char> cropImage(
    ffi.Pointer<ffi.Char> inputPath,
    ffi.Pointer<ffi.Char> outputPath,
    double cropX,
    double cropY,
    double cropWidth,
    double cropHeight,
    int quality,
  ) {
    return _cropImage(
      inputPath,
      outputPath,
      cropX,
      cropY,
      cropWidth,
      cropHeight,
      quality,
    );
  }

  late final _cropImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Int32)>>('CropImage');
  late final _cropImage = _cropImagePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, double, double, double, double, int)>();

  ffi.Pointer<ffi.Char> resizeImage(
    ffi.Pointer<ffi.Char> inputPath,
    ffi.Pointer<ffi.Char> outputPath,
    double width,
    double height,
    int quality,
  ) {
    return _resizeImage(
      inputPath,
      outputPath,
      width,
      height,
      quality,
    );
  }

  late final _resizeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Double,
              ffi.Double,
              ffi.Int32)>>('ResizeImage');
  late final _resizeImage = _resizeImagePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, double, double, int)>();

  ffi.Pointer<ffi.Char> cropAndResizeImage(
    ffi.Pointer<ffi.Char> inputPath,
    ffi.Pointer<ffi.Char> outputPath,
    double cropX,
    double cropY,
    double cropWidth,
    double cropHeight,
    double width,
    double height,
    int quality,
  ) {
    return _cropAndResizeImage(
      inputPath,
      outputPath,
      cropX,
      cropY,
      cropWidth,
      cropHeight,
      width,
      height,
      quality,
    );
  }

  late final _cropAndResizeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Int32)>>('CropAndResizeImage');
  late final _cropAndResizeImage = _cropAndResizeImagePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          double,
          double,
          double,
          double,
          double,
          double,
          int)>();

  ffi.Pointer<ffi.Char> overlayImage(
    ffi.Pointer<ffi.Char> inputPath,
    ffi.Pointer<ffi.Char> overlayPath,
    ffi.Pointer<ffi.Char> outputPath,
    double x,
    double y,
    double overlayWidth,
    double overlayHeight,
    int quality,
  ) {
    return _overlayImage(
      inputPath,
      overlayPath,
      outputPath,
      x,
      y,
      overlayWidth,
      overlayHeight,
      quality,
    );
  }

  late final _overlayImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Int32)>>('OverlayImage');
  late final _overlayImage = _overlayImagePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          double,
          double,
          double,
          double,
          int)>();

  ffi.Pointer<ffi.Char> applyBoardOverlay(
    ffi.Pointer<ffi.Char> inputPath,
    ffi.Pointer<ffi.Char> outputPath,
    ffi.Pointer<ffi.Char> backgroundFile,
    double width,
    double height,
    double x,
    double y,
    int quality,
  ) {
    return _applyBoardOverlay(
      inputPath,
      outputPath,
      backgroundFile,
      width,
      height,
      x,
      y,
      quality,
    );
  }

  late final _applyBoardOverlayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Int32)>>('ApplyBoardOverlay');
  late final _applyBoardOverlay = _applyBoardOverlayPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          double,
          double,
          double,
          double,
          int)>();
}
