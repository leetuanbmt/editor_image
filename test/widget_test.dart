// This is a basic Flutter widget test.
//
// To perform an interaction with a widget in your test, use the WidgetTester
// utility in the flutter_test package. For example, you can send tap and scroll
// gestures. You can also use WidgetTester to find child widgets in the widget
// tree, read text, and verify that the values of widget properties are correct.

import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:image_picker/image_picker.dart';
import 'package:mockito/annotations.dart';

// T·∫°o mock cho ImageProcessor m√† kh√¥ng g·ªçi c√°c h√†m c·ªßa platform
class MockMyApp extends StatelessWidget {
  const MockMyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: const Text('Image Processor Demo')),
        body: Column(
          children: [
            Text('Th√¥ng tin th∆∞ vi·ªán native:'),
            ElevatedButton(onPressed: () {}, child: const Text('Ch·ªçn ·∫£nh')),
            // Th√™m c√°c n√∫t Resize v√† C·∫Øt
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                ElevatedButton(onPressed: () {}, child: const Text('Resize')),
                ElevatedButton(onPressed: () {}, child: const Text('C·∫Øt')),
              ],
            ),
          ],
        ),
      ),
    );
  }
}

@GenerateMocks([ImagePicker])
void main() {
  TestWidgetsFlutterBinding.ensureInitialized();

  group('Ki·ªÉm tra ch·ª©c nƒÉng UI c·ªßa ·ª©ng d·ª•ng', () {
    testWidgets('·ª®ng d·ª•ng hi·ªÉn th·ªã ti√™u ƒë·ªÅ ch√≠nh x√°c', (
      WidgetTester tester,
    ) async {
      // S·ª≠ d·ª•ng mock app thay v√¨ app th·∫≠t ƒë·ªÉ tr√°nh l·ªói native library
      await tester.pumpWidget(const MockMyApp());

      // Ki·ªÉm tra ti√™u ƒë·ªÅ
      expect(find.text('Image Processor Demo'), findsOneWidget);
    });

    testWidgets('Hi·ªÉn th·ªã n√∫t ch·ªçn ·∫£nh', (WidgetTester tester) async {
      // S·ª≠ d·ª•ng mock app
      await tester.pumpWidget(const MockMyApp());

      // Ki·ªÉm tra n√∫t ch·ªçn ·∫£nh
      expect(find.text('Ch·ªçn ·∫£nh'), findsOneWidget);
    });

    testWidgets('Hi·ªÉn th·ªã n√∫t Resize v√† C·∫Øt', (WidgetTester tester) async {
      // S·ª≠ d·ª•ng mock app
      await tester.pumpWidget(const MockMyApp());

      // Ki·ªÉm tra c√°c n√∫t x·ª≠ l√Ω ·∫£nh
      expect(find.text('Resize'), findsOneWidget);
      expect(find.text('C·∫Øt'), findsOneWidget);
    });
  });

  // Test c√°c ch·ª©c nƒÉng x·ª≠ l√Ω ·∫£nh (s·ª≠ d·ª•ng mock ƒë·ªÉ tr√°nh g·ªçi native code)
  group('M√¥ t·∫£ quy tr√¨nh x·ª≠ l√Ω ·∫£nh', () {
    test('Ki·ªÉm tra quy tr√¨nh resize ·∫£nh', () {
      // M√¥ t·∫£ quy tr√¨nh resize ·∫£nh

      // Ki·ªÉm tra logic t√≠nh to√°n k√≠ch th∆∞·ªõc m·ªõi
      final originalSize = Size(1000, 800);
      final targetSize = Size(300, 400);

      // T√≠nh to√°n t·ª∑ l·ªá co gi√£n
      final scaleWidth = targetSize.width / originalSize.width; // 0.3
      final scaleHeight = targetSize.height / originalSize.height; // 0.5

      // Ch·ªçn t·ª∑ l·ªá nh·ªè h∆°n ƒë·ªÉ ƒë·∫£m b·∫£o ·∫£nh kh·ªõp v·ªõi k√≠ch th∆∞·ªõc
      final scale = scaleWidth < scaleHeight ? scaleWidth : scaleHeight; // 0.3

      // K√≠ch th∆∞·ªõc m·ªõi sau khi resize
      final newWidth = originalSize.width * scale; // 300
      final newHeight = originalSize.height * scale; // 240

      // Ki·ªÉm tra k·∫øt qu·∫£
      expect(scale, 0.3);
      expect(newWidth, 300.0);
      expect(newHeight, 240.0);
    });

    test('Ki·ªÉm tra quy tr√¨nh c·∫Øt ·∫£nh', () {
      // M√¥ t·∫£ quy tr√¨nh c·∫Øt ·∫£nh
      final inputSize = Size(1000, 800);

      // C·∫Øt 50px t·ª´ m·ªói c·∫°nh
      final cropWidth = inputSize.width - 100.0; // 900
      final cropHeight = inputSize.height - 100.0; // 700

      // Ki·ªÉm tra k·∫øt qu·∫£
      expect(cropWidth, 900.0);
      expect(cropHeight, 700.0);
    });
  });

  group('Ki·ªÉm tra ti√™u ch√≠ ƒë√°nh gi√° hi·ªáu su·∫•t', () {
    test('Ph√¢n lo·∫°i hi·ªáu su·∫•t d·ª±a tr√™n th·ªùi gian x·ª≠ l√Ω', () {
      // M√¥ ph·ªèng h√†m ƒë√°nh gi√° hi·ªáu su·∫•t
      String getPerformanceRating(int timeMs) {
        if (timeMs < 200) return 'R·∫•t nhanh ‚ö°';
        if (timeMs < 500) return 'Nhanh üëç';
        if (timeMs < 1000) return 'B√¨nh th∆∞·ªùng ‚è±Ô∏è';
        if (timeMs < 2000) return 'H∆°i ch·∫≠m ‚è≥';
        return 'Ch·∫≠m, c·∫ßn t·ªëi ∆∞u ‚è∞';
      }

      // Ki·ªÉm tra c√°c ng∆∞·ª°ng ph√¢n lo·∫°i
      expect(getPerformanceRating(100), 'R·∫•t nhanh ‚ö°');
      expect(getPerformanceRating(300), 'Nhanh üëç');
      expect(getPerformanceRating(700), 'B√¨nh th∆∞·ªùng ‚è±Ô∏è');
      expect(getPerformanceRating(1500), 'H∆°i ch·∫≠m ‚è≥');
      expect(getPerformanceRating(3000), 'Ch·∫≠m, c·∫ßn t·ªëi ∆∞u ‚è∞');
    });
  });
}
